# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateEventInput {
  date: DateTime!
  description: String!
  endTime: DateTime!
  image: Upload
  location: String!
  name: String!
  startTime: DateTime!
}

input CreateNotificationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

type CreatePaymentAuth {
  access_token: String
  expires_in: String!
}

input CreatePaymentInput {
  accountReference: String!
  amount: String!
  phoneNumber: String!
}

input CreatePostInput {
  audio: String
  content: String!
  image: String
  title: String!
  video: String
}

input CreateTicketPurchaseDTO {
  eventId: String!
  name: String
  quantity: Int!
  ticketTypeId: String!
  transactionId: String!
}

input CreateTicketTypeDTO {
  eventId: String!
  price: Float!
  quantity: Int!
  ticketType: TicketTypeEnum!
}

input CreateUserInput {
  """Email of the user"""
  email: String!

  """Name of the user"""
  name: String!

  """Password of the user"""
  password: String

  """Authentication provider (e.g., google)"""
  provider: String

  """ID from the authentication provider"""
  providerId: String

  """Role of the user"""
  role: Role! = USER
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  creatorId: String!
  date: DateTime!
  description: String!
  endTime: DateTime!
  id: ID!
  image: String!
  location: String!
  name: String!
  startTime: DateTime!
}

input LoginRequestDTO {
  email: String!
  password: String!
}

type LoginResponseDTO {
  access_token: String!
}

type Mutation {
  CreateTicket(createTicketTypeDTO: CreateTicketTypeDTO!): TicketEntity!
  DeleteTickets(ticketId: String!): Boolean!
  PurchaseTicket(createTicketPurchaseDTO: CreateTicketPurchaseDTO!): TicketEntity!
  UpdateTicketTypeQuantity(quantity: Int!, ticketId: String!): TicketEntity!
  changeUserRole(id: String!, newRole: Role!): UserEntity!
  createEvent(createEventInput: CreateEventInput!, image: Upload!): Event!
  createNotification(createNotificationInput: CreateNotificationInput!): Notification!
  createPayment(createPaymentInput: CreatePaymentInput!): CreatePaymentAuth!
  createPost(audio: Upload, createPostInput: CreatePostInput!, image: Upload, video: Upload): PostEntity!
  createUser(createUserInput: CreateUserInput!): UserEntity!
  deleteEvent(id: String!): Boolean!
  login(loginInput: LoginRequestDTO!): LoginResponseDTO!
  multipleUpload(files: [Upload!]!): [String!]!
  register(registerInput: RegisterRequestDTO!): RegisterResponseDTO!
  registerUrl: String!
  removeNotification(id: Int!): Notification!
  removePost(id: String!): PostEntity!
  removeUser(email: String!): UserEntity!
  singleUpload(file: Upload!): String!
  updateEvent(id: String!, image: Upload, updateEventInput: UpdateEventInput!): Event!
  updateNotification(updateNotificationInput: UpdateNotificationInput!): Notification!
  updatePost(updatePostInput: UpdatePostInput!): PostEntity!
  updateUser(email: String!, updateUserInput: UpdateUserDto!): UserEntity!
}

type Notification {
  """Example field (placeholder)"""
  exampleField: Int!
}

type PostEntity {
  audio: String!
  authorId: String!
  content: String!
  createdAt: DateTime!
  id: String!
  image: String!
  title: String!
  updatedAt: DateTime!
  video: String!
}

type Query {
  AllTickets: [TicketEntity!]!
  Event(id: String!): Event!
  Events: [Event!]!
  TicketsForAnEvent(eventId: String!): [TicketEntity!]!
  findAll: [UserEntity!]!
  findOne(email: String!): UserEntity!
  notification(id: Int!): Notification!
  notifications: [Notification!]!
  post(id: String!): PostEntity!
  posts: [PostEntity!]!
  whoAmI: UserEntity!
}

input RegisterRequestDTO {
  email: String!
  name: String!
  password: String!
  provider: String
  providerId: String
  role: Role
}

type RegisterResponseDTO {
  access_token: String!
}

"""The roles a user can have"""
enum Role {
  ADMIN
  SUPERADMIN
  USER
}

type TicketEntity {
  email: String!
  eventId: String!
  name: String!
  phoneNumber: String
  price: Float!
  quantity: Int!
  ticketType: TicketTypeEnum!
  transactionId: String!
}

"""The type of ticket"""
enum TicketTypeEnum {
  GENERAL
  STUDENT
  VIP
}

input UpdateEventInput {
  date: DateTime
  description: String
  endTime: DateTime
  image: Upload
  location: String
  name: String
  startTime: DateTime
}

input UpdateNotificationInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdatePostInput {
  audio: String
  content: String
  id: String!
  image: String
  title: String
  video: String
}

input UpdateUserDto {
  email: String
  id: String!

  """Name of the user"""
  name: String
  password: String

  """Authentication provider (e.g., google)"""
  provider: String

  """ID from the authentication provider"""
  providerId: String
  role: Role
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserEntity {
  createdAt: DateTime!
  email: String!
  id: String!
  name: String!
  password: String!
  phoneNumber: String!
  provider: String!
  providerId: String!
  role: Role!
  updatedAt: DateTime!
}