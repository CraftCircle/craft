generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid()) @map("_id")
  email       String        @unique
  password    String?
  provider    String        @default("email")
  providerId  String?
  name        String
  phoneNumber String?
  role        Role          @default(USER)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  post        Post[]
  event       Event[]
  ticket      Ticket[]
  product     Product[]
  order       Order[]
  Transaction Transaction[]
}

enum Role {
  ADMIN
  USER
  SUPERADMIN
}

model Event {
  id          String       @id @default(uuid()) @map("_id")
  name        String
  description String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  image       String
  location    String
  creatorId   String
  User        User         @relation(fields: [creatorId], references: [id])
  tickets     Ticket[]
  ticketTypes TicketType[]
}

model Ticket {
  id            String         @id @default(uuid()) @map("_id")
  price         Float
  ticketType    TicketTypeEnum
  transactionId String
  quantity      Int
  scanned       Boolean        @default(false)
  eventId       String
  userId        String
  event         Event          @relation(fields: [eventId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  createdAt     DateTime       @default(now())
  Transaction   Transaction    @relation(fields: [transactionId], references: [id])
}

model Transaction {
  id             String            @id @default(uuid()) @map("_id")
  amount         Float
  invoiceNumber  String?           @unique
  userId         String
  user           User              @relation(fields: [userId], references: [id])
  status         TransactionStatus @default(PENDING)
  extra_data     String?           @default("")
  pesapalOrderId String?           @unique
  ticket         Ticket[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum TicketTypeEnum {
  GENERAL
  STUDENT
  VIP
}

model TicketType {
  id         String         @id @default(uuid()) @map("_id")
  ticketType TicketTypeEnum
  price      Float
  quantity   Int
  eventId    String
  image      String
  event      Event          @relation(fields: [eventId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order[]  @relation("ProductOrders")
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  productId   String
  quantity    Int
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  product     Product     @relation("ProductOrders", fields: [productId], references: [id])
  User        User        @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELED
}

model Post {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  image     String?
  video     String?
  audio     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
