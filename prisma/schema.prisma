generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid()) @map("_id")
  email        String         @unique
  password     String?
  provider     String         @default("email")
  providerId   String?
  name         String
  phoneNumber  String?
  role         Role           @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  post         Post[]
  event        Event[]
  ticket       Ticket[]
  product      Product[]
  Transaction  Transaction[]
  Notification Notification[]
  Availability Availability[]
  Booking      Booking[]
}

model Event {
  id          String       @id @default(uuid()) @map("_id")
  name        String
  description String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  image       String
  location    String
  creatorId   String
  User        User         @relation(fields: [creatorId], references: [id])
  tickets     Ticket[]
  ticketTypes TicketType[]
}

model Ticket {
  id            String         @id @default(uuid()) @map("_id")
  price         Float
  ticketType    TicketTypeEnum
  transactionId String
  quantity      Int
  scanned       Boolean        @default(false)
  eventId       String
  userId        String
  event         Event          @relation(fields: [eventId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  createdAt     DateTime       @default(now())
  Transaction   Transaction    @relation(fields: [transactionId], references: [id])
}

model Transaction {
  id             String            @id @default(uuid()) @map("_id")
  amount         Float
  invoiceNumber  String?           @unique
  userId         String
  user           User              @relation(fields: [userId], references: [id])
  status         TransactionStatus @default(PENDING)
  extra_data     String?           @default("")
  pesapalOrderId String?           @unique
  ticket         Ticket[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model PesapalIPN {
  id          String   @id @default(uuid())
  ipnId       String   @unique
  ipnUrl      String
  type        String   // e.g., 'GET'
  createdAt   DateTime @default(now())
}

model TicketType {
  id         String         @id @default(uuid()) @map("_id")
  ticketType TicketTypeEnum
  price      Float
  quantity   Int
  eventId    String
  image      String
  event      Event          @relation(fields: [eventId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Product {
  id            String   @id @default(uuid())
  name          String
  description   String
  price         Float
  stock         Int
  category      String
  location      String?
  contactNumber String?
  images        String[]
  isPublished   Boolean  @default(false)
  views         Int      @default(0)
  owner         User     @relation(fields: [ownerId], references: [id])
  ownerId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Post {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  image     String?
  video     String?
  audio     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id            String               @id @default(uuid())
  userId        String
  type          NotificationType     @default(InApp)
  status        NotificationStatus   @default(Unread)
  category      NotificationCategory
  title         String
  body          Json
  externalError Json?
  createdAt     DateTime             @default(now())
  readAt        DateTime             @updatedAt
  user          User                 @relation(fields: [userId], references: [id])
}

model Availability {
  id        String    @id @default(uuid())
  adminId   String
  admin     User      @relation(fields: [adminId], references: [id])
  startTime DateTime
  endTime   DateTime
  dayOfWeek String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
}

model Booking {
  id             String        @id @default(uuid())
  availabilityId String
  availability   Availability  @relation(fields: [availabilityId], references: [id])
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  status         BookingStatus @default(PENDING)
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum TicketTypeEnum {
  GENERAL
  STUDENT
  VIP
}

enum NotificationType {
  InApp
  Email
  Push
}

enum NotificationStatus {
  Sent
  Read
  Unread
}

enum NotificationCategory {
  General
  Transaction
  Event
  Post
  Ticket
  Product
}

enum Role {
  ADMIN
  USER
  SUPERADMIN
}
