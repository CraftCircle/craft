### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Event {
  amount: Float!
  createdAt: DateTime!
  description: String!
  eventDate: DateTime!
  id: ID!
  location: String!
  name: String!
  updatedAt: DateTime!
}

input EventCreateInput {
  amount: Float!
  description: String!
  eventDate: DateTime!
  location: String!
  name: String!
}

input EventOrderByInput {
  createdAt: SortOrder
}

input EventUpdateInput {
  amount: Float
  description: String
  eventDate: DateTime
  location: String
  name: String
}

input EventWhereInput {
  amount: Float
  description: String
  eventDate: DateTime
  location: String
  name: String
}

input EventWhereUniqueInput {
  id: String
}

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserRegisterInput!): User!
  deleteEvent(where: EventWhereUniqueInput!): Event!
  deletePost(where: PostWhereUniqueInput!): Post!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
}

type Post {
  content: String!
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

input PostCreateInput {
  content: String!
  title: String!
}

input PostOrderByInput {
  createdAt: SortOrder
}

input PostUpdateInput {
  content: String
  title: String
}

input PostWhereInput {
  content: String
  title: String
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  currentUser: User
  event(where: EventWhereUniqueInput!): Event
  events(orderBy: EventOrderByInput, skip: Int, take: Int, where: EventWhereInput): [Event!]!
  post(where: PostWhereUniqueInput!): Post
  posts(orderBy: PostOrderByInput, skip: Int, take: Int, where: PostWhereInput): [Post!]!
  users(orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum Role {
  ADMIN
  USER
}

enum SortOrder {
  asc
  desc
}

type Ticket {
  createdAt: DateTime!
  event: Event!
  holder: User!
  id: ID!
}

input TicketCreateInput {
  eventId: String!
  holderId: String!
}

input TicketOrderByInput {
  createdAt: SortOrder
}

input TicketUpdateInput {
  eventId: String
  holderId: String
}

input TicketWhereInput {
  eventId: String
  holderId: String
}

input TicketWhereUniqueInput {
  id: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  password: String
  updatedAt: DateTime!
}

input UserOrderByInput {
  createdAt: SortOrder
}

input UserRegisterInput {
  email: String!
  name: String
  password: String!
  role: Role
}

input UserWhereInput {
  email: String
}

input UserWhereUniqueInput {
  auth0Id: String
  email: String
  id: String
}